export interface Cache<T = unknown> {
    /**
     * Attempts to retrieve a value from the cache. If a value exists, it will be
     * returned with the remaining time-to-live (in seconds).
     *
     * @param namespace A isolated segement of the cache where keys are tracked.
     * @param key The identifier used to retrieve the value.
     * @returns A promise for a 2-element tuple containing the value and TTL in
     * seconds. If no value is retrieved, the value will be `undefined` and the
     * TTL will be `0`.
     */
    get(namespace: string, key: string): Promise<[T | undefined, number]>;
    /**
     * If the cache implementation supports storing values, `set` makes a best
     * attempt at storing the value provided until the time-to-live specified.
     *
     * @param namespace A isolated segement of the cache where keys are tracked.
     * @param key The identifier used to store the value.
     * @param value The value to be stored under the key.
     * @param ttl The amount of seconds the value stays valid in the cache.
     */
    set(namespace: string, key: string, value: T, ttl: number): void;
}
declare class Bucket<T> {
    expires: Map<string, number>;
    data: Map<string, T>;
    constructor();
    get(key: string): [T | undefined, number];
    set(key: string, value: T, ttl: number): void;
}
export declare class MemoryCache<T> implements Cache<T> {
    namespaces: Map<string, Bucket<T>>;
    constructor();
    get(namespace: string, key: string): Promise<[T | undefined, number]>;
    set(namespace: string, key: string, value: T, ttl: number): void;
}
export {};
